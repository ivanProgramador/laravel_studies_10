Uma Gate é uma função anonima que recebe alguns parametros e retorna um valor verdadeiro ou falso,
ela deve ser criada dentro do arquivo "AppServiceProvider" dentro da função boot.

  public function boot(): void
    {
        //Gates

        //testando se o role do usuario é admin

        Gate::define('user_is_admin', function (User $user) {

            return $user->role === 'admin';

        });


    }
------------------------------------------------------------------------
depois de criar uma gate eu posso usar o retono dela para permitir ou negar o acesso 
do usuario a um determinado recurso ou pagina, no caso abaixo eu faço isso com uma frase 

------------------------------------------------------------------------------------------

public function onlyAdmin(){

        //usando a gate para verificar se o usuario é admin

      if (!Gate::allows('user_is_admin')) {

         //se não for admin

          echo 'Voce não é um administrador.';

      } else {

            //se for admin
          echo 'Você é um administrador, bem-vindo!';
          
      }

       
  }

----------------------------------------------------------------------------------------
As gates tam bem podem ser usada para cultar recursos  dependendo do usuario por exemplo 
pode ter botões ou paragrafos qua aparecem somente para os administradores ou para os dois 
usando dirretivas do blade integradas com as gates.

@can('user_is_admin') 
  <p>somente admienistradores podem ver 
@endcan

@can('user_is_user') 
  <p>somente usuarios comuns podem ver 
@endcan

@can('user_is_admin') 
    <p>somente admienistradores podem ver<p>
  @else 
     <p> outra menagem caso não seja 
@endcan


@cannot('user_is_user')
   <p> se for usuario comum não pode ver 
@endcannot

@canany(['user_is_admin','user_is_user'])
  <p>usuarios e administradores podem ver, mas se tiver uma gate que não esteja no array 
     naõ vai aparecer..<p>    
  
@endcanany
------------------------------------------------------------
eu posso usar coleções de permissões no exemplo abaixo ao inves de 
informar nas permissions qque o meu usuario possui epnas o nivel user
de permisões eu posso colocar um array dizendo oque ele pode ou não 
fazer dentro do sistema, no caso do meu usuario ele pode deletar e 
inserir dados, eu posso fazer uma logica onde as gates leian essa lista 
de permissões e liberem ou não acesso a recursos do sistema com base nessa lista      

'permissions'=>['insert','delete']

  User::factory()->create([
            'name' => 'Usuario comum',
            'email' => 'userC@example.com',
            'password'=>bcrypt('Aa123456'),
            'role'=>'user',
            'permissions'=>['insert','delete']
        ]);

Gate lendo as permissões 

 Gate::define('user_can_insert', function (User $user) {

            //nessa gate eu uso a função in array para buscar 
            //se existe a plavra insert dentro dele
            //mas quando o meu usuario faz a reuisição ele não chega
            //como um array e sim como um json 
            // por isso eu tenho que usar o json_decode()
            //assim eu posso passar ele como paratro para a função in_array
            // 1- ela recebe a palavra que eu quero buscar
            // 2- o array onde eu quero buscar

           return in_array('insert',json_decode($user->permissions));



        });












